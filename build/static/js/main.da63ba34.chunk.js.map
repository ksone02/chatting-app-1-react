{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","placeholder","type","room","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","displayName","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da63ba34.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyB_mUtrJzBcnf8FDmNcJKQwdxg9Q1mqB-A\",\r\n  authDomain: \"chattingapp1-81802.firebaseapp.com\",\r\n  projectId: \"chattingapp1-81802\",\r\n  storageBucket: \"chattingapp1-81802.appspot.com\",\r\n  messagingSenderId: \"1013831252498\",\r\n  appId: \"1:1013831252498:web:e39f54b41d5de8b56236cb\",\r\n  measurementId: \"G-2PT3RLS592\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { useEffect, useState } from \"react\";\r\nimport './SidebarChat.css';\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport db from \"./firebase\";\r\n\r\nfunction SidebarChat({ id, name, addNewChat }) {\r\n    const [seed, setSeed] = useState(' ');\r\n    const [messages, setMessages] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            db.collection(\"rooms\")\r\n                 .doc(id)\r\n                 .collection(\"message\")\r\n                 .orderBy('timestamp', 'desc')\r\n                 .onSnapshot((snapshot) => \r\n                     setMessages(snapshot.docs.map((doc) => doc.data()))\r\n                 );\r\n        }\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n       setSeed(Math.floor(Math.random() * 5000));\r\n    }, []);\r\n\r\n    const createChat = () => {\r\n        const roomName = prompt(\"Please enter name for chat\");\r\n\r\n        if (roomName) {\r\n            db.collection(\"rooms\").add({\r\n                name: roomName,\r\n            });\r\n        }\r\n    };\r\n\r\n    /* jshint ignore:start */\r\n    return !addNewChat ? (\r\n        <Link to={`/rooms/${id}`}>\r\n            <div className=\"sidebarChat\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n                <div className=\"sidebarChat_info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{messages[0]?.message}</p> \r\n                </div>\r\n            </div>\r\n        </Link>\r\n    ) : (\r\n        <div onClick={createChat} className=\"sidebarChat\">\r\n            <h2>Add new chat</h2>\r\n        </div>\r\n    );\r\n    /* jshint ignore:end */\r\n}\r\n\r\nexport default SidebarChat;","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n    /* jshint ignore:start */\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n    /* jshint ignore:end */\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","import React, { useEffect, useState } from \"react\";\r\nimport './Sidebar.css';\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction Sidebar() {\r\n    const [rooms, setRooms] = useState([]);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) => \r\n            setRooms(snapshot.docs.map((doc) => ({\r\n                        id : doc.id,\r\n                        data: doc.data(),\r\n                    })\r\n                ))\r\n        );\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n\r\n    }, []);\r\n\r\n    /* jshint ignore:start */\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar_header\">\r\n                <Avatar src={user?.photoURL}/>\r\n                <div className=\"sidebar_headerRight\">\r\n                    <IconButton>\r\n                        <DonutLargeIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ChatIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar_search\">\r\n                <div className=\"sidebar_searchContainer\">\r\n                    <SearchOutlined />\r\n                    <input placeholder=\"Search or start new chat\" type=\"text\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar_chats\">\r\n                <SidebarChat addNewChat />\r\n                {rooms.map((room) => (\r\n                    <SidebarChat key = {room.id} id={room.id} name={room.data.name} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n    /* jshint ignore:end */\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport \"./Chat.css\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\nimport AttachFile from \"@material-ui/icons/AttachFile\";\r\nimport MoreVert from \"@material-ui/icons/MoreVert\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction Chat() {\r\n    const [input, setInput] = useState(\"\");\r\n    const { roomId } = useParams();\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        if (roomId) {\r\n            db.collection(\"rooms\")\r\n                .doc(roomId)\r\n                .onSnapshot((snapshot) => setRoomName(snapshot.data().name));\r\n\r\n            db.collection(\"rooms\")\r\n            .doc(roomId)\r\n            .collection(\"message\")\r\n            .orderBy('timestamp', 'asc')\r\n            .onSnapshot((snapshot)  => \r\n                setMessages(snapshot.docs.map((doc) => doc.data()))\r\n            );\r\n        }\r\n    }, [roomId]);\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"You typed >>> \", input);\r\n\r\n        db.collection('rooms').doc(roomId).collection('message').add({\r\n            message: input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        });\r\n\r\n        setInput(\"\");\r\n    };\r\n\r\n    /* jshint ignore:start */\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat_header\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${Math.floor(Math.random() * 5000)}.svg`} />\r\n\r\n                <div className=\"chat_headerInfo\">\r\n                    <h3>{roomName}</h3>\r\n                    <p>\r\n                        last seen{\" \"}\r\n                        {new Date(\r\n                        messages[messages.length -1]?.timestamp?.toDate()\r\n                    ).toUTCString()}</p>\r\n                </div>\r\n\r\n                <div className=\"chat_headerRight\">\r\n                    <IconButton>\r\n                        <SearchOutlined />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachFile />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chat_body\">\r\n                {messages.map((message) => (\r\n                    <p className={`chat_message ${message.name === user.displayName && \"chat_reciever\"}`}>\r\n                        <span className=\"chat_name\">{message.name}</span>\r\n                        {message.message}\r\n                        <span className=\"chat_timestamp\">\r\n                            {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                        </span>\r\n                    </p>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat_footer\">\r\n                <InsertEmoticonIcon />\r\n                <form>\r\n                    <input \r\n                        value={input} \r\n                        onChange={(e) => setInput(e.target.value)} \r\n                        placeholder=\"Type a message\" \r\n                        type=\"text\"\r\n                    />\r\n                    <button onClick={sendMessage} type=\"submit\">Send</button>\r\n                </form>\r\n                <MicIcon />\r\n            </div>\r\n        </div>\r\n    );\r\n    /* jshint ignore:end */\r\n}\r\n\r\nexport default Chat;","export const initialState = {\r\n    user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import { Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { auth, provider } from \"./firebase\";\r\nimport \"./Login.css\";\r\nimport { actionTypes } from \"./reducer\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction Login() {\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const signIn = () => {\r\n        auth\r\n            .signInWithPopup(provider)\r\n            .then((result) => {\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: result.user,\r\n                });\r\n            })\r\n            .catch((error) => alert(error.message));\r\n    };\r\n\r\n    return (\r\n        /* jshint ignore:start */\r\n        <div className=\"login\">\r\n            <div className=\"login_container\">\r\n                <img\r\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/330px-WhatsApp.svg.png\"\r\n                    alt=\"\"\r\n                />\r\n                <div className=\"login_text\">\r\n                    <h1>Sign in to WatsApp</h1>\r\n                </div>\r\n\r\n                <Button type=\"submit\" onClick={signIn}>\r\n                    Sign In With Google\r\n                </Button>\r\n            </div>\r\n        </div>\r\n        /* jshint ignore:end */\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\nimport './App.css';\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n\n  /* jshint ignore:start */\n  return (\n    <div className=\"app\">\n\n      {!user ? (\n        <Login />\n      ) : (\n      <div className=\"app_body\">\n        <Router>\n          <Sidebar />\n          <Switch>\n            <Route path=\"/rooms/:roomId\">\n              <Chat />\n            </Route>\n            <Route path=\"/\">\n              <Chat />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n      )}\n    </div>\n  );\n  /* jshint ignore:end */\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\nimport * as serviceWorker from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  /* jshint ignore:start */\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  /* jshint ignore:end */\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nserviceWorker.unregister();"],"sourceRoot":""}